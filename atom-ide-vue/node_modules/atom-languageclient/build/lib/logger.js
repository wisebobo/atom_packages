"use strict";
/* eslint-disable no-console */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilteredLogger = exports.NullLogger = exports.ConsoleLogger = void 0;
class ConsoleLogger {
    constructor(prefix) {
        this.prefix = prefix;
    }
    warn(...args) {
        console.warn(...this.format(args));
    }
    error(...args) {
        console.error(...this.format(args));
    }
    info(...args) {
        console.info(...this.format(args));
    }
    debug(...args) {
        console.debug(...this.format(args));
    }
    log(...args) {
        console.log(...this.format(args));
    }
    format(args_) {
        const args = args_.filter((a) => a != null);
        if (typeof args[0] === 'string') {
            if (args.length === 1) {
                return [`${this.prefix} ${args[0]}`];
            }
            else if (args.length === 2) {
                return [`${this.prefix} ${args[0]}`, args[1]];
            }
            else {
                return [`${this.prefix} ${args[0]}`, args.slice(1)];
            }
        }
        return [`${this.prefix}`, args];
    }
}
exports.ConsoleLogger = ConsoleLogger;
class NullLogger {
    warn(..._args) { }
    error(..._args) { }
    info(..._args) { }
    log(..._args) { }
    debug(..._args) { }
}
exports.NullLogger = NullLogger;
class FilteredLogger {
    constructor(logger, predicate) {
        this._logger = logger;
        this._predicate = predicate || ((_level, _args) => true);
    }
    warn(...args) {
        if (this._predicate('warn', args)) {
            this._logger.warn(...args);
        }
    }
    error(...args) {
        if (this._predicate('error', args)) {
            this._logger.error(...args);
        }
    }
    info(...args) {
        if (this._predicate('info', args)) {
            this._logger.info(...args);
        }
    }
    debug(...args) {
        if (this._predicate('debug', args)) {
            this._logger.debug(...args);
        }
    }
    log(...args) {
        if (this._predicate('log', args)) {
            this._logger.log(...args);
        }
    }
}
exports.FilteredLogger = FilteredLogger;
FilteredLogger.UserLevelFilter = (level, _args) => level === 'warn' || level === 'error';
FilteredLogger.DeveloperLevelFilter = (_level, _args) => true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0JBQStCOzs7QUFVL0IsTUFBYSxhQUFhO0lBR3hCLFlBQVksTUFBYztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQUcsSUFBVztRQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxLQUFLLENBQUMsR0FBRyxJQUFXO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFHLElBQVc7UUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsSUFBVztRQUN6QixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxHQUFHLENBQUMsR0FBRyxJQUFXO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFVO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDdEM7aUJBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDNUIsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMvQztpQkFBTTtnQkFDTCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyRDtTQUNGO1FBRUQsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRjtBQXpDRCxzQ0F5Q0M7QUFFRCxNQUFhLFVBQVU7SUFDZCxJQUFJLENBQUMsR0FBRyxLQUFZLElBQVUsQ0FBQztJQUMvQixLQUFLLENBQUMsR0FBRyxLQUFZLElBQVUsQ0FBQztJQUNoQyxJQUFJLENBQUMsR0FBRyxLQUFZLElBQVUsQ0FBQztJQUMvQixHQUFHLENBQUMsR0FBRyxLQUFZLElBQVUsQ0FBQztJQUM5QixLQUFLLENBQUMsR0FBRyxLQUFZLElBQVUsQ0FBQztDQUN4QztBQU5ELGdDQU1DO0FBRUQsTUFBYSxjQUFjO0lBT3pCLFlBQVksTUFBYyxFQUFFLFNBQW1EO1FBQzdFLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQUcsSUFBVztRQUN4QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsSUFBVztRQUN6QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQUcsSUFBVztRQUN4QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsSUFBVztRQUN6QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQUcsSUFBVztRQUN2QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDOztBQXhDSCx3Q0F5Q0M7QUFyQ2UsOEJBQWUsR0FBRyxDQUFDLEtBQWEsRUFBRSxLQUFZLEVBQVcsRUFBRSxDQUFDLEtBQUssS0FBSyxNQUFNLElBQUksS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUNsRyxtQ0FBb0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxLQUFZLEVBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxuZXhwb3J0IGludGVyZmFjZSBMb2dnZXIge1xuICB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcbiAgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkO1xuICBpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcbiAgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcbiAgZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgQ29uc29sZUxvZ2dlciB7XG4gIHB1YmxpYyBwcmVmaXg6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwcmVmaXg6IHN0cmluZykge1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICB9XG5cbiAgcHVibGljIHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBjb25zb2xlLndhcm4oLi4udGhpcy5mb3JtYXQoYXJncykpO1xuICB9XG5cbiAgcHVibGljIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgY29uc29sZS5lcnJvciguLi50aGlzLmZvcm1hdChhcmdzKSk7XG4gIH1cblxuICBwdWJsaWMgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGNvbnNvbGUuaW5mbyguLi50aGlzLmZvcm1hdChhcmdzKSk7XG4gIH1cblxuICBwdWJsaWMgZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBjb25zb2xlLmRlYnVnKC4uLnRoaXMuZm9ybWF0KGFyZ3MpKTtcbiAgfVxuXG4gIHB1YmxpYyBsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyguLi50aGlzLmZvcm1hdChhcmdzKSk7XG4gIH1cblxuICBwdWJsaWMgZm9ybWF0KGFyZ3NfOiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmdzXy5maWx0ZXIoKGE6IGFueSkgPT4gYSAhPSBudWxsKTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIFtgJHt0aGlzLnByZWZpeH0gJHthcmdzWzBdfWBdO1xuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gW2Ake3RoaXMucHJlZml4fSAke2FyZ3NbMF19YCwgYXJnc1sxXV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW2Ake3RoaXMucHJlZml4fSAke2FyZ3NbMF19YCwgYXJncy5zbGljZSgxKV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtgJHt0aGlzLnByZWZpeH1gLCBhcmdzXTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTnVsbExvZ2dlciB7XG4gIHB1YmxpYyB3YXJuKC4uLl9hcmdzOiBhbnlbXSk6IHZvaWQgeyB9XG4gIHB1YmxpYyBlcnJvciguLi5fYXJnczogYW55W10pOiB2b2lkIHsgfVxuICBwdWJsaWMgaW5mbyguLi5fYXJnczogYW55W10pOiB2b2lkIHsgfVxuICBwdWJsaWMgbG9nKC4uLl9hcmdzOiBhbnlbXSk6IHZvaWQgeyB9XG4gIHB1YmxpYyBkZWJ1ZyguLi5fYXJnczogYW55W10pOiB2b2lkIHsgfVxufVxuXG5leHBvcnQgY2xhc3MgRmlsdGVyZWRMb2dnZXIge1xuICBwcml2YXRlIF9sb2dnZXI6IExvZ2dlcjtcbiAgcHJpdmF0ZSBfcHJlZGljYXRlOiAobGV2ZWw6IHN0cmluZywgYXJnczogYW55W10pID0+IGJvb2xlYW47XG5cbiAgcHVibGljIHN0YXRpYyBVc2VyTGV2ZWxGaWx0ZXIgPSAobGV2ZWw6IHN0cmluZywgX2FyZ3M6IGFueVtdKTogYm9vbGVhbiA9PiBsZXZlbCA9PT0gJ3dhcm4nIHx8IGxldmVsID09PSAnZXJyb3InO1xuICBwdWJsaWMgc3RhdGljIERldmVsb3BlckxldmVsRmlsdGVyID0gKF9sZXZlbDogc3RyaW5nLCBfYXJnczogYW55W10pOiB0cnVlID0+IHRydWU7XG5cbiAgY29uc3RydWN0b3IobG9nZ2VyOiBMb2dnZXIsIHByZWRpY2F0ZT86IChsZXZlbDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4gYm9vbGVhbikge1xuICAgIHRoaXMuX2xvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGUgfHwgKChfbGV2ZWwsIF9hcmdzKSA9PiB0cnVlKTtcbiAgfVxuXG4gIHB1YmxpYyB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSgnd2FybicsIGFyZ3MpKSB7XG4gICAgICB0aGlzLl9sb2dnZXIud2FybiguLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcHJlZGljYXRlKCdlcnJvcicsIGFyZ3MpKSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoLi4uYXJncyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGluZm8oLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcHJlZGljYXRlKCdpbmZvJywgYXJncykpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9wcmVkaWNhdGUoJ2RlYnVnJywgYXJncykpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyguLi5hcmdzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSgnbG9nJywgYXJncykpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5sb2coLi4uYXJncyk7XG4gICAgfVxuICB9XG59XG4iXX0=