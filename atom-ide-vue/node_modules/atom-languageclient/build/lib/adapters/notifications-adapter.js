"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const languageclient_1 = require("../languageclient");
/** Public: Adapts Atom's user notifications to those of the language server protocol. */
class NotificationsAdapter {
    /**
     * Public: Attach to a {LanguageClientConnection} to recieve events indicating
     * when user notifications should be displayed.
     */
    static attach(connection, name, projectPath) {
        connection.onShowMessage((m) => NotificationsAdapter.onShowMessage(m, name, projectPath));
        connection.onShowMessageRequest((m) => NotificationsAdapter.onShowMessageRequest(m, name, projectPath));
    }
    /**
     * Public: Show a notification message with buttons using the Atom notifications API.
     *
     * @param params The {ShowMessageRequestParams} received from the language server
     *   indicating the details of the notification to be displayed.
     * @param name   The name of the language server so the user can identify the
     *   context of the message.
     * @param projectPath The path of the current project.
     */
    static onShowMessageRequest(params, name, projectPath) {
        return new Promise((resolve, _reject) => {
            const options = {
                dismissable: true,
                detail: `${name} ${projectPath}`,
            };
            if (params.actions) {
                options.buttons = params.actions.map((a) => ({
                    text: a.title,
                    onDidClick: () => {
                        resolve(a);
                        if (notification != null) {
                            notification.dismiss();
                        }
                    },
                }));
            }
            const notification = addNotificationForMessage(params.type, params.message, options);
            if (notification != null) {
                notification.onDidDismiss(() => {
                    resolve(null);
                });
            }
        });
    }
    /**
     * Public: Show a notification message using the Atom notifications API.
     *
     * @param params The {ShowMessageParams} received from the language server
     *   indicating the details of the notification to be displayed.
     * @param name   The name of the language server so the user can identify the
     *   context of the message.
     * @param projectPath The path of the current project.
     */
    static onShowMessage(params, name, projectPath) {
        addNotificationForMessage(params.type, params.message, {
            dismissable: true,
            detail: `${name} ${projectPath}`,
        });
    }
    /**
     * Public: Convert a {MessageActionItem} from the language server into an
     * equivalent {NotificationButton} within Atom.
     *
     * @param actionItem The {MessageActionItem} to be converted.
     * @returns A {NotificationButton} equivalent to the {MessageActionItem} given.
     */
    static actionItemToNotificationButton(actionItem) {
        return {
            text: actionItem.title,
        };
    }
}
exports.default = NotificationsAdapter;
function messageTypeToString(messageType) {
    switch (messageType) {
        case languageclient_1.MessageType.Error: return 'error';
        case languageclient_1.MessageType.Warning: return 'warning';
        default: return 'info';
    }
}
function addNotificationForMessage(messageType, message, options) {
    function isDuplicate(note) {
        const noteDismissed = note.isDismissed && note.isDismissed();
        const noteOptions = note.getOptions && note.getOptions() || {};
        return !noteDismissed &&
            note.getType() === messageTypeToString(messageType) &&
            note.getMessage() === message &&
            noteOptions.detail === options.detail;
    }
    if (atom.notifications.getNotifications().some(isDuplicate)) {
        return null;
    }
    switch (messageType) {
        case languageclient_1.MessageType.Error:
            return atom.notifications.addError(message, options);
        case languageclient_1.MessageType.Warning:
            return atom.notifications.addWarning(message, options);
        case languageclient_1.MessageType.Log:
            // console.log(params.message);
            return null;
        case languageclient_1.MessageType.Info:
        default:
            return atom.notifications.addInfo(message, options);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9ucy1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2FkYXB0ZXJzL25vdGlmaWNhdGlvbnMtYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNEQU0yQjtBQVUzQix5RkFBeUY7QUFDekYsTUFBcUIsb0JBQW9CO0lBQ3ZDOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQ2xCLFVBQW9DLEVBQ3BDLElBQVksRUFDWixXQUFtQjtRQUVuQixVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzFGLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDaEMsTUFBZ0MsRUFDaEMsSUFBWSxFQUNaLFdBQW1CO1FBRW5CLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDdEMsTUFBTSxPQUFPLEdBQXdCO2dCQUNuQyxXQUFXLEVBQUUsSUFBSTtnQkFDakIsTUFBTSxFQUFFLEdBQUcsSUFBSSxJQUFJLFdBQVcsRUFBRTthQUNqQyxDQUFDO1lBQ0YsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUNsQixPQUFPLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUMzQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUs7b0JBQ2IsVUFBVSxFQUFFLEdBQUcsRUFB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LENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXG4gIE1lc3NhZ2VUeXBlLFxuICBNZXNzYWdlQWN0aW9uSXRlbSxcbiAgU2hvd01lc3NhZ2VQYXJhbXMsXG4gIFNob3dNZXNzYWdlUmVxdWVzdFBhcmFtcyxcbn0gZnJvbSAnLi4vbGFuZ3VhZ2VjbGllbnQnO1xuaW1wb3J0IHtcbiAgTm90aWZpY2F0aW9uLFxuICBOb3RpZmljYXRpb25PcHRpb25zLFxuICBOb3RpZmljYXRpb25FeHQsXG59IGZyb20gJ2F0b20nO1xuaW1wb3J0IHtcbiAgTm90aWZpY2F0aW9uQnV0dG9uLFxufSBmcm9tICdhdG9tLWlkZSc7XG5cbi8qKiBQdWJsaWM6IEFkYXB0cyBBdG9tJ3MgdXNlciBub3RpZmljYXRpb25zIHRvIHRob3NlIG9mIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgcHJvdG9jb2wuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RpZmljYXRpb25zQWRhcHRlciB7XG4gIC8qKlxuICAgKiBQdWJsaWM6IEF0dGFjaCB0byBhIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHJlY2lldmUgZXZlbnRzIGluZGljYXRpbmdcbiAgICogd2hlbiB1c2VyIG5vdGlmaWNhdGlvbnMgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgYXR0YWNoKFxuICAgIGNvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgcHJvamVjdFBhdGg6IHN0cmluZyxcbiAgKTogdm9pZCB7XG4gICAgY29ubmVjdGlvbi5vblNob3dNZXNzYWdlKChtKSA9PiBOb3RpZmljYXRpb25zQWRhcHRlci5vblNob3dNZXNzYWdlKG0sIG5hbWUsIHByb2plY3RQYXRoKSk7XG4gICAgY29ubmVjdGlvbi5vblNob3dNZXNzYWdlUmVxdWVzdCgobSkgPT4gTm90aWZpY2F0aW9uc0FkYXB0ZXIub25TaG93TWVzc2FnZVJlcXVlc3QobSwgbmFtZSwgcHJvamVjdFBhdGgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWM6IFNob3cgYSBub3RpZmljYXRpb24gbWVzc2FnZSB3aXRoIGJ1dHRvbnMgdXNpbmcgdGhlIEF0b20gbm90aWZpY2F0aW9ucyBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgVGhlIHtTaG93TWVzc2FnZVJlcXVlc3RQYXJhbXN9IHJlY2VpdmVkIGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlclxuICAgKiAgIGluZGljYXRpbmcgdGhlIGRldGFpbHMgb2YgdGhlIG5vdGlmaWNhdGlvbiB0byBiZSBkaXNwbGF5ZWQuXG4gICAqIEBwYXJhbSBuYW1lICAgVGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIHNlcnZlciBzbyB0aGUgdXNlciBjYW4gaWRlbnRpZnkgdGhlXG4gICAqICAgY29udGV4dCBvZiB0aGUgbWVzc2FnZS5cbiAgICogQHBhcmFtIHByb2plY3RQYXRoIFRoZSBwYXRoIG9mIHRoZSBjdXJyZW50IHByb2plY3QuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIG9uU2hvd01lc3NhZ2VSZXF1ZXN0KFxuICAgIHBhcmFtczogU2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW1zLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBwcm9qZWN0UGF0aDogc3RyaW5nLFxuICApOiBQcm9taXNlPE1lc3NhZ2VBY3Rpb25JdGVtIHwgbnVsbD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9uczogTm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDogYCR7bmFtZX0gJHtwcm9qZWN0UGF0aH1gLFxuICAgICAgfTtcbiAgICAgIGlmIChwYXJhbXMuYWN0aW9ucykge1xuICAgICAgICBvcHRpb25zLmJ1dHRvbnMgPSBwYXJhbXMuYWN0aW9ucy5tYXAoKGEpID0+ICh7XG4gICAgICAgICAgdGV4dDogYS50aXRsZSxcbiAgICAgICAgICBvbkRpZENsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGEpO1xuICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5kaXNtaXNzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3RpZmljYXRpb24gPSBhZGROb3RpZmljYXRpb25Gb3JNZXNzYWdlKFxuICAgICAgICBwYXJhbXMudHlwZSxcbiAgICAgICAgcGFyYW1zLm1lc3NhZ2UsXG4gICAgICAgIG9wdGlvbnMpO1xuXG4gICAgICBpZiAobm90aWZpY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgbm90aWZpY2F0aW9uLm9uRGlkRGlzbWlzcygoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljOiBTaG93IGEgbm90aWZpY2F0aW9uIG1lc3NhZ2UgdXNpbmcgdGhlIEF0b20gbm90aWZpY2F0aW9ucyBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgVGhlIHtTaG93TWVzc2FnZVBhcmFtc30gcmVjZWl2ZWQgZnJvbSB0aGUgbGFuZ3VhZ2Ugc2VydmVyXG4gICAqICAgaW5kaWNhdGluZyB0aGUgZGV0YWlscyBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGJlIGRpc3BsYXllZC5cbiAgICogQHBhcmFtIG5hbWUgICBUaGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHNvIHRoZSB1c2VyIGNhbiBpZGVudGlmeSB0aGVcbiAgICogICBjb250ZXh0IG9mIHRoZSBtZXNzYWdlLlxuICAgKiBAcGFyYW0gcHJvamVjdFBhdGggVGhlIHBhdGggb2YgdGhlIGN1cnJlbnQgcHJvamVjdC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgb25TaG93TWVzc2FnZShcbiAgICBwYXJhbXM6IFNob3dNZXNzYWdlUGFyYW1zLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBwcm9qZWN0UGF0aDogc3RyaW5nLFxuICApOiB2b2lkIHtcbiAgICBhZGROb3RpZmljYXRpb25Gb3JNZXNzYWdlKHBhcmFtcy50eXBlLCBwYXJhbXMubWVzc2FnZSwge1xuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICBkZXRhaWw6IGAke25hbWV9ICR7cHJvamVjdFBhdGh9YCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWM6IENvbnZlcnQgYSB7TWVzc2FnZUFjdGlvbkl0ZW19IGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlciBpbnRvIGFuXG4gICAqIGVxdWl2YWxlbnQge05vdGlmaWNhdGlvbkJ1dHRvbn0gd2l0aGluIEF0b20uXG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb25JdGVtIFRoZSB7TWVzc2FnZUFjdGlvbkl0ZW19IHRvIGJlIGNvbnZlcnRlZC5cbiAgICogQHJldHVybnMgQSB7Tm90aWZpY2F0aW9uQnV0dG9ufSBlcXVpdmFsZW50IHRvIHRoZSB7TWVzc2FnZUFjdGlvbkl0ZW19IGdpdmVuLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBhY3Rpb25JdGVtVG9Ob3RpZmljYXRpb25CdXR0b24oXG4gICAgYWN0aW9uSXRlbTogTWVzc2FnZUFjdGlvbkl0ZW0sXG4gICk6IE5vdGlmaWNhdGlvbkJ1dHRvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGFjdGlvbkl0ZW0udGl0bGUsXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXNzYWdlVHlwZVRvU3RyaW5nKFxuICBtZXNzYWdlVHlwZTogbnVtYmVyLFxuKTogc3RyaW5nIHtcbiAgc3dpdGNoIChtZXNzYWdlVHlwZSkge1xuICAgIGNhc2UgTWVzc2FnZVR5cGUuRXJyb3I6IHJldHVybiAnZXJyb3InO1xuICAgIGNhc2UgTWVzc2FnZVR5cGUuV2FybmluZzogcmV0dXJuICd3YXJuaW5nJztcbiAgICBkZWZhdWx0OiByZXR1cm4gJ2luZm8nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZE5vdGlmaWNhdGlvbkZvck1lc3NhZ2UoXG4gIG1lc3NhZ2VUeXBlOiBudW1iZXIsXG4gIG1lc3NhZ2U6IHN0cmluZyxcbiAgb3B0aW9uczogTm90aWZpY2F0aW9uT3B0aW9ucyxcbik6IE5vdGlmaWNhdGlvbiB8IG51bGwge1xuICBmdW5jdGlvbiBpc0R1cGxpY2F0ZShub3RlOiBOb3RpZmljYXRpb25FeHQpOiBib29sZWFuIHtcbiAgICBjb25zdCBub3RlRGlzbWlzc2VkID0gbm90ZS5pc0Rpc21pc3NlZCAmJiBub3RlLmlzRGlzbWlzc2VkKCk7XG4gICAgY29uc3Qgbm90ZU9wdGlvbnMgPSBub3RlLmdldE9wdGlvbnMgJiYgbm90ZS5nZXRPcHRpb25zKCkgfHwge307XG4gICAgcmV0dXJuICFub3RlRGlzbWlzc2VkICYmXG4gICAgICBub3RlLmdldFR5cGUoKSA9PT0gbWVzc2FnZVR5cGVUb1N0cmluZyhtZXNzYWdlVHlwZSkgJiZcbiAgICAgIG5vdGUuZ2V0TWVzc2FnZSgpID09PSBtZXNzYWdlICYmXG4gICAgICBub3RlT3B0aW9ucy5kZXRhaWwgPT09IG9wdGlvbnMuZGV0YWlsO1xuICB9XG4gIGlmIChhdG9tLm5vdGlmaWNhdGlvbnMuZ2V0Tm90aWZpY2F0aW9ucygpLnNvbWUoaXNEdXBsaWNhdGUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKG1lc3NhZ2VUeXBlKSB7XG4gICAgY2FzZSBNZXNzYWdlVHlwZS5FcnJvcjpcbiAgICAgIHJldHVybiBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgY2FzZSBNZXNzYWdlVHlwZS5XYXJuaW5nOlxuICAgICAgcmV0dXJuIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIGNhc2UgTWVzc2FnZVR5cGUuTG9nOlxuICAgICAgLy8gY29uc29sZS5sb2cocGFyYW1zLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBNZXNzYWdlVHlwZS5JbmZvOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYXRvbS5ub3RpZmljYXRpb25zLmFkZEluZm8obWVzc2FnZSwgb3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==