"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("../convert");
class RenameAdapter {
    static canAdapt(serverCapabilities) {
        return serverCapabilities.renameProvider === true;
    }
    static getRename(connection, editor, point, newName) {
        return __awaiter(this, void 0, void 0, function* () {
            const edit = yield connection.rename(RenameAdapter.createRenameParams(editor, point, newName));
            if (edit === null) {
                return null;
            }
            if (edit.documentChanges) {
                return RenameAdapter.convertDocumentChanges(edit.documentChanges);
            }
            else if (edit.changes) {
                return RenameAdapter.convertChanges(edit.changes);
            }
            else {
                return null;
            }
        });
    }
    static createRenameParams(editor, point, newName) {
        return {
            textDocument: convert_1.default.editorToTextDocumentIdentifier(editor),
            position: convert_1.default.pointToPosition(point),
            newName,
        };
    }
    static convertChanges(changes) {
        const result = new Map();
        Object.keys(changes).forEach((uri) => {
            result.set(convert_1.default.uriToPath(uri), convert_1.default.convertLsTextEdits(changes[uri]));
        });
        return result;
    }
    static convertDocumentChanges(documentChanges) {
        const result = new Map();
        documentChanges.forEach((documentEdit) => {
            result.set(convert_1.default.uriToPath(documentEdit.textDocument.uri), convert_1.default.convertLsTextEdits(documentEdit.edits));
        });
        return result;
    }
}
exports.default = RenameAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuYW1lLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRhcHRlcnMvcmVuYW1lLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQSx3Q0FBaUM7QUFhakMsTUFBcUIsYUFBYTtJQUN6QixNQUFNLENBQUMsUUFBUSxDQUFDLGtCQUFzQztRQUMzRCxPQUFPLGtCQUFrQixDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUM7SUFDcEQsQ0FBQztJQUVNLE1BQU0sQ0FBTyxTQUFTLENBQzNCLFVBQW9DLEVBQ3BDLE1BQWtCLEVBQ2xCLEtBQVksRUFDWixPQUFlOztZQUVmLE1BQU0sSUFBSSxHQUFHLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FDbEMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQ3pELENBQUM7WUFDRixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFFRCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3hCLE9BQU8sYUFBYSxDQUFDLHNCQUFzQixDQUFxQixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDdkY7aUJBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUN2QixPQUFPLGFBQWEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ25EO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxDQUFDO2FBQ2I7UUFDSCxDQUFDO0tBQUE7SUFFTSxNQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBa0IsRUFBRSxLQUFZLEVBQUUsT0FBZTtRQUNoRixPQUFPO1lBQ0wsWUFBWSxFQUFFLGlCQUFPLENBQUMsOEJBQThCLENBQUMsTUFBTSxDQUFDO1lBQzVELFFBQVEsRUFBRSxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7WUFDeEMsT0FBTztTQUNSLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLGNBQWMsQ0FDMUIsT0FBc0M7UUFFdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQ1IsaUJBQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQ3RCLGlCQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3pDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxNQUFNLENBQUMsc0JBQXNCLENBQ2xDLGVBQW1DO1FBRW5DLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDekIsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sQ0FBQyxHQUFHLENBQ1IsaUJBQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDaEQsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQy9DLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRjtBQTVERCxnQ0E0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhdG9tSWRlIGZyb20gJ2F0b20taWRlJztcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xuaW1wb3J0IHtcbiAgUG9pbnQsXG4gIFRleHRFZGl0b3IsXG59IGZyb20gJ2F0b20nO1xuaW1wb3J0IHtcbiAgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxuICBSZW5hbWVQYXJhbXMsXG4gIFNlcnZlckNhcGFiaWxpdGllcyxcbiAgVGV4dERvY3VtZW50RWRpdCxcbiAgVGV4dEVkaXQsXG59IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuYW1lQWRhcHRlciB7XG4gIHB1YmxpYyBzdGF0aWMgY2FuQWRhcHQoc2VydmVyQ2FwYWJpbGl0aWVzOiBTZXJ2ZXJDYXBhYmlsaXRpZXMpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc2VydmVyQ2FwYWJpbGl0aWVzLnJlbmFtZVByb3ZpZGVyID09PSB0cnVlO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBnZXRSZW5hbWUoXG4gICAgY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxuICAgIGVkaXRvcjogVGV4dEVkaXRvcixcbiAgICBwb2ludDogUG9pbnQsXG4gICAgbmV3TmFtZTogc3RyaW5nLFxuICApOiBQcm9taXNlPE1hcDxhdG9tSWRlLklkZVVyaSwgYXRvbUlkZS5UZXh0RWRpdFtdPiB8IG51bGw+IHtcbiAgICBjb25zdCBlZGl0ID0gYXdhaXQgY29ubmVjdGlvbi5yZW5hbWUoXG4gICAgICBSZW5hbWVBZGFwdGVyLmNyZWF0ZVJlbmFtZVBhcmFtcyhlZGl0b3IsIHBvaW50LCBuZXdOYW1lKSxcbiAgICApO1xuICAgIGlmIChlZGl0ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoZWRpdC5kb2N1bWVudENoYW5nZXMpIHtcbiAgICAgIHJldHVybiBSZW5hbWVBZGFwdGVyLmNvbnZlcnREb2N1bWVudENoYW5nZXMoPFRleHREb2N1bWVudEVkaXRbXT5lZGl0LmRvY3VtZW50Q2hhbmdlcyk7XG4gICAgfSBlbHNlIGlmIChlZGl0LmNoYW5nZXMpIHtcbiAgICAgIHJldHVybiBSZW5hbWVBZGFwdGVyLmNvbnZlcnRDaGFuZ2VzKGVkaXQuY2hhbmdlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlUmVuYW1lUGFyYW1zKGVkaXRvcjogVGV4dEVkaXRvciwgcG9pbnQ6IFBvaW50LCBuZXdOYW1lOiBzdHJpbmcpOiBSZW5hbWVQYXJhbXMge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0RG9jdW1lbnQ6IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyKGVkaXRvciksXG4gICAgICBwb3NpdGlvbjogQ29udmVydC5wb2ludFRvUG9zaXRpb24ocG9pbnQpLFxuICAgICAgbmV3TmFtZSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0Q2hhbmdlcyhcbiAgICBjaGFuZ2VzOiB7IFt1cmk6IHN0cmluZ106IFRleHRFZGl0W10gfSxcbiAgKTogTWFwPGF0b21JZGUuSWRlVXJpLCBhdG9tSWRlLlRleHRFZGl0W10+IHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gICAgT2JqZWN0LmtleXMoY2hhbmdlcykuZm9yRWFjaCgodXJpKSA9PiB7XG4gICAgICByZXN1bHQuc2V0KFxuICAgICAgICBDb252ZXJ0LnVyaVRvUGF0aCh1cmkpLFxuICAgICAgICBDb252ZXJ0LmNvbnZlcnRMc1RleHRFZGl0cyhjaGFuZ2VzW3VyaV0pLFxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0RG9jdW1lbnRDaGFuZ2VzKFxuICAgIGRvY3VtZW50Q2hhbmdlczogVGV4dERvY3VtZW50RWRpdFtdLFxuICApOiBNYXA8YXRvbUlkZS5JZGVVcmksIGF0b21JZGUuVGV4dEVkaXRbXT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXAoKTtcbiAgICBkb2N1bWVudENoYW5nZXMuZm9yRWFjaCgoZG9jdW1lbnRFZGl0KSA9PiB7XG4gICAgICByZXN1bHQuc2V0KFxuICAgICAgICBDb252ZXJ0LnVyaVRvUGF0aChkb2N1bWVudEVkaXQudGV4dERvY3VtZW50LnVyaSksXG4gICAgICAgIENvbnZlcnQuY29udmVydExzVGV4dEVkaXRzKGRvY3VtZW50RWRpdC5lZGl0cyksXG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==