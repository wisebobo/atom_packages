"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const convert_1 = require("../convert");
const atom_1 = require("atom");
class SignatureHelpAdapter {
    constructor(server, grammarScopes) {
        this._disposables = new atom_1.CompositeDisposable();
        this._connection = server.connection;
        this._capabilities = server.capabilities;
        this._grammarScopes = grammarScopes;
    }
    /**
     * @returns A {Boolean} indicating this adapter can adapt the server based on the
     *   given serverCapabilities.
     */
    static canAdapt(serverCapabilities) {
        return serverCapabilities.signatureHelpProvider != null;
    }
    dispose() {
        this._disposables.dispose();
    }
    attach(register) {
        const { signatureHelpProvider } = this._capabilities;
        assert(signatureHelpProvider != null);
        let triggerCharacters;
        if (signatureHelpProvider && Array.isArray(signatureHelpProvider.triggerCharacters)) {
            triggerCharacters = new Set(signatureHelpProvider.triggerCharacters);
        }
        this._disposables.add(register({
            priority: 1,
            grammarScopes: this._grammarScopes,
            triggerCharacters,
            getSignatureHelp: this.getSignatureHelp.bind(this),
        }));
    }
    /** Public: Retrieves signature help for a given editor and position. */
    getSignatureHelp(editor, point) {
        return this._connection.signatureHelp(convert_1.default.editorToTextDocumentPositionParams(editor, point));
    }
}
exports.default = SignatureHelpAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLWhlbHAtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9zaWduYXR1cmUtaGVscC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWtDO0FBQ2xDLHdDQUFpQztBQUVqQywrQkFJYztBQU9kLE1BQXFCLG9CQUFvQjtJQU12QyxZQUFZLE1BQW9CLEVBQUUsYUFBdUI7UUFMakQsaUJBQVksR0FBd0IsSUFBSSwwQkFBbUIsRUFBRSxDQUFDO1FBTXBFLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQXNDO1FBQzNELE9BQU8sa0JBQWtCLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDO0lBQzFELENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQXVDO1FBQ25ELE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDckQsTUFBTSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxDQUFDO1FBRXRDLElBQUksaUJBQTBDLENBQUM7UUFDL0MsSUFBSSxxQkFBcUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDbkYsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUN0RTtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUNuQixRQUFRLENBQUM7WUFDUCxRQUFRLEVBQUUsQ0FBQztZQUNYLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNsQyxpQkFBaUI7WUFDakIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbkQsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsd0VBQXdFO0lBQ2pFLGdCQUFnQixDQUFDLE1BQWtCLEVBQUUsS0FBWTtRQUN0RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGlCQUFPLENBQUMsa0NBQWtDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQztDQUNGO0FBL0NELHVDQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGF0b21JZGUgZnJvbSAnYXRvbS1pZGUnO1xuaW1wb3J0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XG5pbXBvcnQgeyBBY3RpdmVTZXJ2ZXIgfSBmcm9tICcuLi9zZXJ2ZXItbWFuYWdlcic7XG5pbXBvcnQge1xuICBDb21wb3NpdGVEaXNwb3NhYmxlLFxuICBQb2ludCxcbiAgVGV4dEVkaXRvcixcbn0gZnJvbSAnYXRvbSc7XG5pbXBvcnQge1xuICBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXG4gIFNlcnZlckNhcGFiaWxpdGllcyxcbiAgU2lnbmF0dXJlSGVscCxcbn0gZnJvbSAnLi4vbGFuZ3VhZ2VjbGllbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWduYXR1cmVIZWxwQWRhcHRlciB7XG4gIHByaXZhdGUgX2Rpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcbiAgcHJpdmF0ZSBfY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uO1xuICBwcml2YXRlIF9jYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcztcbiAgcHJpdmF0ZSBfZ3JhbW1hclNjb3Blczogc3RyaW5nW107XG5cbiAgY29uc3RydWN0b3Ioc2VydmVyOiBBY3RpdmVTZXJ2ZXIsIGdyYW1tYXJTY29wZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fY29ubmVjdGlvbiA9IHNlcnZlci5jb25uZWN0aW9uO1xuICAgIHRoaXMuX2NhcGFiaWxpdGllcyA9IHNlcnZlci5jYXBhYmlsaXRpZXM7XG4gICAgdGhpcy5fZ3JhbW1hclNjb3BlcyA9IGdyYW1tYXJTY29wZXM7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgQSB7Qm9vbGVhbn0gaW5kaWNhdGluZyB0aGlzIGFkYXB0ZXIgY2FuIGFkYXB0IHRoZSBzZXJ2ZXIgYmFzZWQgb24gdGhlXG4gICAqICAgZ2l2ZW4gc2VydmVyQ2FwYWJpbGl0aWVzLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjYW5BZGFwdChzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzZXJ2ZXJDYXBhYmlsaXRpZXMuc2lnbmF0dXJlSGVscFByb3ZpZGVyICE9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5kaXNwb3NlKCk7XG4gIH1cblxuICBwdWJsaWMgYXR0YWNoKHJlZ2lzdGVyOiBhdG9tSWRlLlNpZ25hdHVyZUhlbHBSZWdpc3RyeSk6IHZvaWQge1xuICAgIGNvbnN0IHsgc2lnbmF0dXJlSGVscFByb3ZpZGVyIH0gPSB0aGlzLl9jYXBhYmlsaXRpZXM7XG4gICAgYXNzZXJ0KHNpZ25hdHVyZUhlbHBQcm92aWRlciAhPSBudWxsKTtcblxuICAgIGxldCB0cmlnZ2VyQ2hhcmFjdGVyczogU2V0PHN0cmluZz4gfCB1bmRlZmluZWQ7XG4gICAgaWYgKHNpZ25hdHVyZUhlbHBQcm92aWRlciAmJiBBcnJheS5pc0FycmF5KHNpZ25hdHVyZUhlbHBQcm92aWRlci50cmlnZ2VyQ2hhcmFjdGVycykpIHtcbiAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzID0gbmV3IFNldChzaWduYXR1cmVIZWxwUHJvdmlkZXIudHJpZ2dlckNoYXJhY3RlcnMpO1xuICAgIH1cblxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmFkZChcbiAgICAgIHJlZ2lzdGVyKHtcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuX2dyYW1tYXJTY29wZXMsXG4gICAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzLFxuICAgICAgICBnZXRTaWduYXR1cmVIZWxwOiB0aGlzLmdldFNpZ25hdHVyZUhlbHAuYmluZCh0aGlzKSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICAvKiogUHVibGljOiBSZXRyaWV2ZXMgc2lnbmF0dXJlIGhlbHAgZm9yIGEgZ2l2ZW4gZWRpdG9yIGFuZCBwb3NpdGlvbi4gKi9cbiAgcHVibGljIGdldFNpZ25hdHVyZUhlbHAoZWRpdG9yOiBUZXh0RWRpdG9yLCBwb2ludDogUG9pbnQpOiBQcm9taXNlPFNpZ25hdHVyZUhlbHAgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3Rpb24uc2lnbmF0dXJlSGVscChDb252ZXJ0LmVkaXRvclRvVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMoZWRpdG9yLCBwb2ludCkpO1xuICB9XG59XG4iXX0=