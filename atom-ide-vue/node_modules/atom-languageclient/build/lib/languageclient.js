"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageClientConnection = void 0;
const jsonrpc = require("vscode-jsonrpc");
const events_1 = require("events");
const logger_1 = require("./logger");
__exportStar(require("vscode-languageserver-protocol"), exports);
/**
 * TypeScript wrapper around JSONRPC to implement Microsoft Language Server Protocol v3
 * https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md
 */
class LanguageClientConnection extends events_1.EventEmitter {
    constructor(rpc, logger) {
        super();
        this._rpc = rpc;
        this._log = logger || new logger_1.NullLogger();
        this.setupLogging();
        rpc.listen();
        this.isConnected = true;
        this._rpc.onClose(() => {
            this.isConnected = false;
            this._log.warn('rpc.onClose', 'The RPC connection closed unexpectedly');
            this.emit('close');
        });
    }
    setupLogging() {
        this._rpc.onError((error) => this._log.error(['rpc.onError', error]));
        this._rpc.onUnhandledNotification((notification) => {
            if (notification.method != null && notification.params != null) {
                this._log.warn(`rpc.onUnhandledNotification ${notification.method}`, notification.params);
            }
            else {
                this._log.warn('rpc.onUnhandledNotification', notification);
            }
        });
        this._rpc.onNotification((...args) => this._log.debug('rpc.onNotification', args));
    }
    dispose() {
        this._rpc.dispose();
    }
    /**
     * Public: Initialize the language server with necessary {InitializeParams}.
     *
     * @param params The {InitializeParams} containing processId, rootPath, options and
     *   server capabilities.
     * @returns A {Promise} containing the {InitializeResult} with details of the server's
     *   capabilities.
     */
    initialize(params) {
        return this._sendRequest('initialize', params);
    }
    /** Public: Send an `initialized` notification to the language server. */
    initialized() {
        this._sendNotification('initialized', {});
    }
    /** Public: Send a `shutdown` request to the language server. */
    shutdown() {
        return this._sendRequest('shutdown');
    }
    /** Public: Send an `exit` notification to the language server. */
    exit() {
        this._sendNotification('exit');
    }
    /**
     * Public: Register a callback for a custom message.
     *
     * @param method A string containing the name of the message to listen for.
     * @param callback The function to be called when the message is received.
     *   The payload from the message is passed to the function.
     */
    onCustom(method, callback) {
        this._onNotification({ method }, callback);
    }
    /**
     * Public: Send a custom request
     *
     * @param method A string containing the name of the request message.
     * @param params The method's parameters
     */
    sendCustomRequest(method, params) {
        return this._sendRequest(method, params);
    }
    /**
     * Public: Send a custom notification
     *
     * @param method A string containing the name of the notification message.
     * @param params The method's parameters
     */
    sendCustomNotification(method, params) {
        this._sendNotification(method, params);
    }
    /**
     * Public: Register a callback for the `window/showMessage` message.
     *
     * @param callback The function to be called when the `window/showMessage` message is
     *   received with {ShowMessageParams} being passed.
     */
    onShowMessage(callback) {
        this._onNotification({ method: 'window/showMessage' }, callback);
    }
    /**
     * Public: Register a callback for the `window/showMessageRequest` message.
     *
     * @param callback The function to be called when the `window/showMessageRequest` message is
     *   received with {ShowMessageRequestParam}' being passed.
     * @returns A {Promise} containing the {MessageActionItem}.
     */
    onShowMessageRequest(callback) {
        this._onRequest({ method: 'window/showMessageRequest' }, callback);
    }
    /**
     * Public: Register a callback for the `window/logMessage` message.
     *
     * @param callback The function to be called when the `window/logMessage` message is
     *   received with {LogMessageParams} being passed.
     */
    onLogMessage(callback) {
        this._onNotification({ method: 'window/logMessage' }, callback);
    }
    /**
     * Public: Register a callback for the `telemetry/event` message.
     *
     * @param callback The function to be called when the `telemetry/event` message is
     *   received with any parameters received being passed on.
     */
    onTelemetryEvent(callback) {
        this._onNotification({ method: 'telemetry/event' }, callback);
    }
    /**
     * Public: Register a callback for the `workspace/applyEdit` message.
     *
     * @param callback The function to be called when the `workspace/applyEdit` message is
     *   received with {ApplyWorkspaceEditParams} being passed.
     * @returns A {Promise} containing the {ApplyWorkspaceEditResponse}.
     */
    onApplyEdit(callback) {
        this._onRequest({ method: 'workspace/applyEdit' }, callback);
    }
    /**
     * Public: Send a `workspace/didChangeConfiguration` notification.
     *
     * @param params The {DidChangeConfigurationParams} containing the new configuration.
     */
    didChangeConfiguration(params) {
        this._sendNotification('workspace/didChangeConfiguration', params);
    }
    /**
     * Public: Send a `textDocument/didOpen` notification.
     *
     * @param params The {DidOpenTextDocumentParams} containing the opened text document details.
     */
    didOpenTextDocument(params) {
        this._sendNotification('textDocument/didOpen', params);
    }
    /**
     * Public: Send a `textDocument/didChange` notification.
     *
     * @param params The {DidChangeTextDocumentParams} containing the changed text document
     *   details including the version number and actual text changes.
     */
    didChangeTextDocument(params) {
        this._sendNotification('textDocument/didChange', params);
    }
    /**
     * Public: Send a `textDocument/didClose` notification.
     *
     * @param params The {DidCloseTextDocumentParams} containing the opened text document details.
     */
    didCloseTextDocument(params) {
        this._sendNotification('textDocument/didClose', params);
    }
    /**
     * Public: Send a `textDocument/willSave` notification.
     *
     * @param params The {WillSaveTextDocumentParams} containing the to-be-saved text document
     *   details and the reason for the save.
     */
    willSaveTextDocument(params) {
        this._sendNotification('textDocument/willSave', params);
    }
    /**
     * Public: Send a `textDocument/willSaveWaitUntil` notification.
     *
     * @param params The {WillSaveTextDocumentParams} containing the to-be-saved text document
     *   details and the reason for the save.
     * @returns A {Promise} containing an {Array} of {TextEdit}s to be applied to the text
     *   document before it is saved.
     */
    willSaveWaitUntilTextDocument(params) {
        return this._sendRequest('textDocument/willSaveWaitUntil', params);
    }
    /**
     * Public: Send a `textDocument/didSave` notification.
     *
     * @param params The {DidSaveTextDocumentParams} containing the saved text document details.
     */
    didSaveTextDocument(params) {
        this._sendNotification('textDocument/didSave', params);
    }
    /**
     * Public: Send a `workspace/didChangeWatchedFiles` notification.
     *
     * @param params The {DidChangeWatchedFilesParams} containing the array of {FileEvent}s that
     *   have been observed upon the watched files.
     */
    didChangeWatchedFiles(params) {
        this._sendNotification('workspace/didChangeWatchedFiles', params);
    }
    /**
     * Public: Register a callback for the `textDocument/publishDiagnostics` message.
     *
     * @param callback The function to be called when the `textDocument/publishDiagnostics` message is
     *   received a {PublishDiagnosticsParams} containing new {Diagnostic} messages for a given uri.
     */
    onPublishDiagnostics(callback) {
        this._onNotification({ method: 'textDocument/publishDiagnostics' }, callback);
    }
    /**
     * Public: Send a `textDocument/completion` request.
     *
     * @param params The {TextDocumentPositionParams} or {CompletionParams} for which
     *   {CompletionItem}s are desired.
     * @param cancellationToken The {CancellationToken} that is used to cancel this request if necessary.
     * @returns A {Promise} containing either a {CompletionList} or an {Array} of {CompletionItem}s.
     */
    completion(params, cancellationToken) {
        // Cancel prior request if necessary
        return this._sendRequest('textDocument/completion', params, cancellationToken);
    }
    /**
     * Public: Send a `completionItem/resolve` request.
     *
     * @param params The {CompletionItem} for which a fully resolved {CompletionItem} is desired.
     * @returns A {Promise} containing a fully resolved {CompletionItem}.
     */
    completionItemResolve(params) {
        return this._sendRequest('completionItem/resolve', params);
    }
    /**
     * Public: Send a `textDocument/hover` request.
     *
     * @param params The {TextDocumentPositionParams} for which a {Hover} is desired.
     * @returns A {Promise} containing a {Hover}.
     */
    hover(params) {
        return this._sendRequest('textDocument/hover', params);
    }
    /**
     * Public: Send a `textDocument/signatureHelp` request.
     *
     * @param params The {TextDocumentPositionParams} for which a {SignatureHelp} is desired.
     * @returns A {Promise} containing a {SignatureHelp}.
     */
    signatureHelp(params) {
        return this._sendRequest('textDocument/signatureHelp', params);
    }
    /**
     * Public: Send a `textDocument/definition` request.
     *
     * @param params The {TextDocumentPositionParams} of a symbol for which one or more {Location}s
     *   that define that symbol are required.
     * @returns A {Promise} containing either a single {Location} or an {Array} of many {Location}s.
     */
    gotoDefinition(params) {
        return this._sendRequest('textDocument/definition', params);
    }
    /**
     * Public: Send a `textDocument/references` request.
     *
     * @param params The {TextDocumentPositionParams} of a symbol for which all referring {Location}s
     *   are desired.
     * @returns A {Promise} containing an {Array} of {Location}s that reference this symbol.
     */
    findReferences(params) {
        return this._sendRequest('textDocument/references', params);
    }
    /**
     * Public: Send a `textDocument/documentHighlight` request.
     *
     * @param params The {TextDocumentPositionParams} of a symbol for which all highlights are desired.
     * @returns A {Promise} containing an {Array} of {DocumentHighlight}s that can be used to
     *   highlight this symbol.
     */
    documentHighlight(params) {
        return this._sendRequest('textDocument/documentHighlight', params);
    }
    /**
     * Public: Send a `textDocument/documentSymbol` request.
     *
     * @param params The {DocumentSymbolParams} that identifies the document for which
     *   symbols are desired.
     * @param cancellationToken The {CancellationToken} that is used to cancel this request if
     *   necessary.
     * @returns A {Promise} containing an {Array} of {SymbolInformation}s that can be used to
     *   navigate this document.
     */
    documentSymbol(params, _cancellationToken) {
        return this._sendRequest('textDocument/documentSymbol', params);
    }
    /**
     * Public: Send a `workspace/symbol` request.
     *
     * @param params The {WorkspaceSymbolParams} containing the query string to search the workspace for.
     * @returns A {Promise} containing an {Array} of {SymbolInformation}s that identify where the query
     *   string occurs within the workspace.
     */
    workspaceSymbol(params) {
        return this._sendRequest('workspace/symbol', params);
    }
    /**
     * Public: Send a `textDocument/codeAction` request.
     *
     * @param params The {CodeActionParams} identifying the document, range and context for the code action.
     * @returns A {Promise} containing an {Array} of {Commands}s that can be performed against the given
     *   documents range.
     */
    codeAction(params) {
        return this._sendRequest('textDocument/codeAction', params);
    }
    /**
     * Public: Send a `textDocument/codeLens` request.
     *
     * @param params The {CodeLensParams} identifying the document for which code lens commands are desired.
     * @returns A {Promise} containing an {Array} of {CodeLens}s that associate commands and data with
     *   specified ranges within the document.
     */
    codeLens(params) {
        return this._sendRequest('textDocument/codeLens', params);
    }
    /**
     * Public: Send a `codeLens/resolve` request.
     *
     * @param params The {CodeLens} identifying the code lens to be resolved with full detail.
     * @returns A {Promise} containing the {CodeLens} fully resolved.
     */
    codeLensResolve(params) {
        return this._sendRequest('codeLens/resolve', params);
    }
    /**
     * Public: Send a `textDocument/documentLink` request.
     *
     * @param params The {DocumentLinkParams} identifying the document for which links should be identified.
     * @returns A {Promise} containing an {Array} of {DocumentLink}s relating uri's to specific ranges
     *   within the document.
     */
    documentLink(params) {
        return this._sendRequest('textDocument/documentLink', params);
    }
    /**
     * Public: Send a `documentLink/resolve` request.
     *
     * @param params The {DocumentLink} identifying the document link to be resolved with full detail.
     * @returns A {Promise} containing the {DocumentLink} fully resolved.
     */
    documentLinkResolve(params) {
        return this._sendRequest('documentLink/resolve', params);
    }
    /**
     * Public: Send a `textDocument/formatting` request.
     *
     * @param params The {DocumentFormattingParams} identifying the document to be formatted as well as
     *   additional formatting preferences.
     * @returns A {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
     *   correctly reformat it.
     */
    documentFormatting(params) {
        return this._sendRequest('textDocument/formatting', params);
    }
    /**
     * Public: Send a `textDocument/rangeFormatting` request.
     *
     * @param params The {DocumentRangeFormattingParams} identifying the document and range to be formatted
     *   as well as additional formatting preferences.
     * @returns A {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
     *   correctly reformat it.
     */
    documentRangeFormatting(params) {
        return this._sendRequest('textDocument/rangeFormatting', params);
    }
    /**
     * Public: Send a `textDocument/onTypeFormatting` request.
     *
     * @param params The {DocumentOnTypeFormattingParams} identifying the document to be formatted,
     *   the character that was typed and at what position as well as additional formatting preferences.
     * @returns A {Promise} containing an {Array} of {TextEdit}s to be applied to the document to
     *   correctly reformat it.
     */
    documentOnTypeFormatting(params) {
        return this._sendRequest('textDocument/onTypeFormatting', params);
    }
    /**
     * Public: Send a `textDocument/rename` request.
     *
     * @param params The {RenameParams} identifying the document containing the symbol to be renamed,
     *   as well as the position and new name.
     * @returns A {Promise} containing an {WorkspaceEdit} that contains a list of {TextEdit}s either
     *   on the changes property (keyed by uri) or the documentChanges property containing
     *   an {Array} of {TextDocumentEdit}s (preferred).
     */
    rename(params) {
        return this._sendRequest('textDocument/rename', params);
    }
    /**
     * Public: Send a `workspace/executeCommand` request.
     *
     * @param params The {ExecuteCommandParams} specifying the command and arguments
     *   the language server should execute (these commands are usually from {CodeLens}
     *   or {CodeAction} responses).
     * @returns A {Promise} containing anything.
     */
    executeCommand(params) {
        return this._sendRequest('workspace/executeCommand', params);
    }
    _onRequest(type, callback) {
        this._rpc.onRequest(type.method, (value) => {
            this._log.debug(`rpc.onRequest ${type.method}`, value);
            return callback(value);
        });
    }
    _onNotification(type, callback) {
        this._rpc.onNotification(type.method, (value) => {
            this._log.debug(`rpc.onNotification ${type.method}`, value);
            callback(value);
        });
    }
    _sendNotification(method, args) {
        this._log.debug(`rpc.sendNotification ${method}`, args);
        this._rpc.sendNotification(method, args);
    }
    _sendRequest(method, args, cancellationToken) {
        return __awaiter(this, void 0, void 0, function* () {
            this._log.debug(`rpc.sendRequest ${method} sending`, args);
            try {
                const start = performance.now();
                let result;
                if (cancellationToken) {
                    result = yield this._rpc.sendRequest(method, args, cancellationToken);
                }
                else {
                    // If cancellationToken is null or undefined, don't add the third
                    // argument otherwise vscode-jsonrpc will send an additional, null
                    // message parameter to the request
                    result = yield this._rpc.sendRequest(method, args);
                }
                const took = performance.now() - start;
                this._log.debug(`rpc.sendRequest ${method} received (${Math.floor(took)}ms)`, result);
                return result;
            }
            catch (e) {
                const responseError = e;
                if (cancellationToken && responseError.code === jsonrpc.ErrorCodes.RequestCancelled) {
                    this._log.debug(`rpc.sendRequest ${method} was cancelled`);
                }
                else {
                    this._log.error(`rpc.sendRequest ${method} threw`, e);
                }
                throw e;
            }
        });
    }
}
exports.LanguageClientConnection = LanguageClientConnection;
//# sourceMappingURL=data:application/json;base64,