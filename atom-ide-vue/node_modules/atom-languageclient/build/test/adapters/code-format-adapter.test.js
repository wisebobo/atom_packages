"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const chai_1 = require("chai");
const sinon = require("sinon");
const convert_1 = require("../../lib/convert");
const ls = require("../../lib/languageclient");
const code_format_adapter_1 = require("../../lib/adapters/code-format-adapter");
const helpers_js_1 = require("../helpers.js");
describe('CodeFormatAdapter', () => {
    let fakeEditor;
    let connection;
    let range;
    beforeEach(() => {
        connection = new ls.LanguageClientConnection(helpers_js_1.createSpyConnection());
        fakeEditor = helpers_js_1.createFakeEditor();
        range = new atom_1.Range([0, 0], [100, 100]);
    });
    describe('canAdapt', () => {
        it('returns true if range formatting is supported', () => {
            const result = code_format_adapter_1.default.canAdapt({
                documentRangeFormattingProvider: true,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns true if document formatting is supported', () => {
            const result = code_format_adapter_1.default.canAdapt({
                documentFormattingProvider: true,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false it no formatting supported', () => {
            const result = code_format_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('format', () => {
        it('prefers range formatting if available', () => {
            const rangeStub = sinon.spy(connection, 'documentRangeFormatting');
            const docStub = sinon.spy(connection, 'documentFormatting');
            code_format_adapter_1.default.format(connection, {
                documentRangeFormattingProvider: true,
                documentFormattingProvider: true,
            }, fakeEditor, range);
            chai_1.expect(rangeStub.called).to.be.true;
            chai_1.expect(docStub.called).to.be.false;
        });
        it('falls back to document formatting if range formatting not available', () => {
            const rangeStub = sinon.spy(connection, 'documentRangeFormatting');
            const docStub = sinon.spy(connection, 'documentFormatting');
            code_format_adapter_1.default.format(connection, { documentFormattingProvider: true }, fakeEditor, range);
            chai_1.expect(rangeStub.called).to.be.false;
            chai_1.expect(docStub.called).to.be.true;
        });
        it('throws if neither range or document formatting are supported', () => {
            chai_1.expect(() => code_format_adapter_1.default.format(connection, {}, fakeEditor, range)).to.throw('');
        });
    });
    describe('formatDocument', () => {
        it('converts the results from the connection', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(connection, 'documentFormatting').resolves([
                {
                    range: {
                        start: { line: 0, character: 1 },
                        end: { line: 0, character: 2 },
                    },
                    newText: 'abc',
                },
                {
                    range: {
                        start: { line: 5, character: 10 },
                        end: { line: 15, character: 20 },
                    },
                    newText: 'def',
                },
            ]);
            const actual = yield code_format_adapter_1.default.formatDocument(connection, fakeEditor);
            chai_1.expect(actual.length).to.equal(2);
            chai_1.expect(actual[0].newText).to.equal('abc');
            chai_1.expect(actual[1].oldRange.start.row).to.equal(5);
            chai_1.expect(actual[1].oldRange.start.column).to.equal(10);
            chai_1.expect(actual[1].oldRange.end.row).to.equal(15);
            chai_1.expect(actual[1].oldRange.end.column).to.equal(20);
            chai_1.expect(actual[1].newText).to.equal('def');
        }));
    });
    describe('createDocumentFormattingParams', () => {
        it('returns the tab size from the editor', () => {
            sinon.stub(fakeEditor, 'getPath').returns('/a/b/c/d.txt');
            sinon.stub(fakeEditor, 'getTabLength').returns(1);
            sinon.stub(fakeEditor, 'getSoftTabs').returns(false);
            const actual = code_format_adapter_1.default.createDocumentFormattingParams(fakeEditor);
            chai_1.expect(actual.textDocument).to.eql({ uri: 'file:///a/b/c/d.txt' });
            chai_1.expect(actual.options.tabSize).to.equal(1);
            chai_1.expect(actual.options.insertSpaces).to.equal(false);
        });
    });
    describe('formatRange', () => {
        it('converts the results from the connection', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(connection, 'documentRangeFormatting').resolves([
                {
                    range: {
                        start: { line: 0, character: 1 },
                        end: { line: 0, character: 2 },
                    },
                    newText: 'abc',
                },
                {
                    range: {
                        start: { line: 5, character: 10 },
                        end: { line: 15, character: 20 },
                    },
                    newText: 'def',
                },
            ]);
            const actual = yield code_format_adapter_1.default.formatRange(connection, fakeEditor, new atom_1.Range([0, 0], [1, 1]));
            chai_1.expect(actual.length).to.equal(2);
            chai_1.expect(actual[0].newText).to.equal('abc');
            chai_1.expect(actual[1].oldRange.start.row).to.equal(5);
            chai_1.expect(actual[1].oldRange.start.column).to.equal(10);
            chai_1.expect(actual[1].oldRange.end.row).to.equal(15);
            chai_1.expect(actual[1].oldRange.end.column).to.equal(20);
            chai_1.expect(actual[1].newText).to.equal('def');
        }));
    });
    describe('createDocumentRangeFormattingParams', () => {
        it('returns the tab size from the editor', () => {
            sinon.stub(fakeEditor, 'getPath').returns('/a/b/c/d.txt');
            sinon.stub(fakeEditor, 'getTabLength').returns(1);
            sinon.stub(fakeEditor, 'getSoftTabs').returns(false);
            const actual = code_format_adapter_1.default.createDocumentRangeFormattingParams(fakeEditor, new atom_1.Range([1, 0], [2, 3]));
            chai_1.expect(actual.textDocument).to.eql({ uri: 'file:///a/b/c/d.txt' });
            chai_1.expect(actual.range).to.eql({
                start: { line: 1, character: 0 },
                end: { line: 2, character: 3 },
            });
            chai_1.expect(actual.options.tabSize).to.equal(1);
            chai_1.expect(actual.options.insertSpaces).to.equal(false);
        });
    });
    describe('getFormatOptions', () => {
        it('returns the tab size from the editor', () => {
            sinon.stub(fakeEditor, 'getTabLength').returns(17);
            const options = code_format_adapter_1.default.getFormatOptions(fakeEditor);
            chai_1.expect(options.tabSize).to.equal(17);
        });
        it('returns the soft tab setting from the editor', () => {
            sinon.stub(fakeEditor, 'getSoftTabs').returns(true);
            const options = code_format_adapter_1.default.getFormatOptions(fakeEditor);
            chai_1.expect(options.insertSpaces).to.be.true;
        });
    });
    describe('convertLsTextEdit', () => {
        it('returns oldRange and newText from a textEdit', () => {
            const textEdit = {
                range: {
                    start: { line: 1, character: 0 },
                    end: { line: 2, character: 3 },
                },
                newText: 'abc-def',
            };
            const actual = convert_1.default.convertLsTextEdit(textEdit);
            chai_1.expect(actual.oldRange).to.eql(new atom_1.Range([1, 0], [2, 3]));
            chai_1.expect(actual.newText).to.equal('abc-def');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,