"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const autocomplete_adapter_1 = require("../../lib/adapters/autocomplete-adapter");
const ls = require("../../lib/languageclient");
const sinon = require("sinon");
const atom_1 = require("atom");
const chai_1 = require("chai");
const helpers_js_1 = require("../helpers.js");
function createRequest({ prefix = "", position = new atom_1.Point(123, 456), activatedManually = true, }) {
    return {
        editor: helpers_js_1.createFakeEditor(),
        bufferPosition: position,
        prefix,
        scopeDescriptor: { getScopesArray() { return ['some.scope']; } },
        activatedManually,
    };
}
// Required and optional properties as of LSP 3.14.0
function createCompletionItem(label, optional = {}) {
    return Object.assign({ label }, optional);
}
describe('AutoCompleteAdapter', () => {
    function createActiveServerSpy() {
        return {
            capabilities: { completionProvider: {} },
            connection: new ls.LanguageClientConnection(helpers_js_1.createSpyConnection()),
            disposable: new atom_1.CompositeDisposable(),
            process: undefined,
            projectPath: '/',
        };
    }
    const completionItems = [
        createCompletionItem('thisHasFiltertext', {
            kind: ls.CompletionItemKind.Keyword,
            detail: 'description1',
            documentation: 'a very exciting keyword',
            filterText: 'labrador',
            sortText: 'z',
        }),
        createCompletionItem('label2', {
            kind: ls.CompletionItemKind.Field,
            detail: 'description2',
            documentation: 'a very exciting field',
            filterText: 'rabbit',
            sortText: 'a',
        }),
        createCompletionItem('label3', {
            kind: ls.CompletionItemKind.Variable,
            detail: 'description3',
            documentation: 'a very exciting variable',
        }),
        createCompletionItem('filteredout', {
            kind: ls.CompletionItemKind.Snippet,
            detail: 'description4',
            documentation: 'should not appear',
            sortText: 'zzz',
        }),
    ];
    const request = createRequest({ prefix: 'lab' });
    describe('getSuggestions', () => {
        let server;
        let autoCompleteAdapter;
        function getResults(items, requestParams) {
            return __awaiter(this, void 0, void 0, function* () {
                sinon.stub(server.connection, 'completion').resolves(items);
                return autoCompleteAdapter.getSuggestions(server, createRequest(requestParams));
            });
        }
        beforeEach(() => {
            server = createActiveServerSpy();
            autoCompleteAdapter = new autocomplete_adapter_1.default();
        });
        it('gets AutoComplete suggestions via LSP given an AutoCompleteRequest', () => __awaiter(void 0, void 0, void 0, function* () {
            const results = yield getResults(completionItems, { prefix: '' });
            chai_1.expect(results.length).equals(completionItems.length);
        }));
        it('provides a filtered selection based on the filterKey', () => __awaiter(void 0, void 0, void 0, function* () {
            const results = yield getResults(completionItems, { prefix: 'lab' });
            chai_1.expect(results.length).equals(2);
            chai_1.expect(results.some((r) => r.displayText === 'thisHasFiltertext')).to.be.true;
            chai_1.expect(results.some((r) => r.displayText === 'label3')).to.be.true;
        }));
        it('uses the sortText property to arrange completions when there is no prefix', () => __awaiter(void 0, void 0, void 0, function* () {
            const sortedItems = [
                createCompletionItem('a', { sortText: 'c' }),
                createCompletionItem('b'),
                createCompletionItem('c', { sortText: 'a' }),
            ];
            const results = yield getResults(sortedItems, { prefix: '' });
            chai_1.expect(results.length).equals(sortedItems.length);
            chai_1.expect(results[0].displayText).equals('c');
            chai_1.expect(results[1].displayText).equals('b');
            chai_1.expect(results[2].displayText).equals('a');
        }));
        it('uses the filterText property to arrange completions when there is a prefix', () => __awaiter(void 0, void 0, void 0, function* () {
            const results = yield getResults(completionItems, { prefix: 'lab' });
            chai_1.expect(results.length).equals(2);
            chai_1.expect(results[0].displayText).equals('label3'); // shorter than 'labrador', so expected to be first
            chai_1.expect(results[1].displayText).equals('thisHasFiltertext');
        }));
    });
    describe('completeSuggestion', () => {
        const partialItems = [
            createCompletionItem('label1'),
            createCompletionItem('label2'),
            createCompletionItem('label3'),
        ];
        const server = createActiveServerSpy();
        sinon.stub(server.connection, 'completion').resolves(partialItems);
        sinon.stub(server.connection, 'completionItemResolve').resolves(createCompletionItem('label3', { detail: 'description3', documentation: 'a very exciting variable' }));
        it('resolves suggestions via LSP given an AutoCompleteRequest', () => __awaiter(void 0, void 0, void 0, function* () {
            const autoCompleteAdapter = new autocomplete_adapter_1.default();
            const results = yield autoCompleteAdapter.getSuggestions(server, request);
            const result = results.find((r) => r.displayText === 'label3');
            chai_1.expect(result).not.to.be.undefined;
            chai_1.expect(result.description).to.be.undefined;
            const resolvedItem = yield autoCompleteAdapter.completeSuggestion(server, result, request);
            chai_1.expect(resolvedItem && resolvedItem.description).equals('a very exciting variable');
        }));
    });
    describe('createCompletionParams', () => {
        it('creates CompletionParams from an AutocompleteRequest with no trigger', () => {
            const result = autocomplete_adapter_1.default.createCompletionParams(request, '', true);
            chai_1.expect(result.textDocument.uri).equals('file:///a/b/c/d.js');
            chai_1.expect(result.position).deep.equals({ line: 123, character: 456 });
            chai_1.expect(result.context && result.context.triggerKind).equals(ls.CompletionTriggerKind.Invoked);
            chai_1.expect(result.context && result.context.triggerCharacter).to.be.undefined;
        });
        it('creates CompletionParams from an AutocompleteRequest with a trigger', () => {
            const result = autocomplete_adapter_1.default.createCompletionParams(request, '.', true);
            chai_1.expect(result.textDocument.uri).equals('file:///a/b/c/d.js');
            chai_1.expect(result.position).deep.equals({ line: 123, character: 456 });
            chai_1.expect(result.context && result.context.triggerKind).equals(ls.CompletionTriggerKind.TriggerCharacter);
            chai_1.expect(result.context && result.context.triggerCharacter).equals('.');
        });
        it('creates CompletionParams from an AutocompleteRequest for a follow-up request', () => {
            const result = autocomplete_adapter_1.default.createCompletionParams(request, '.', false);
            chai_1.expect(result.textDocument.uri).equals('file:///a/b/c/d.js');
            chai_1.expect(result.position).deep.equals({ line: 123, character: 456 });
            chai_1.expect(result.context && result.context.triggerKind)
                .equals(ls.CompletionTriggerKind.TriggerForIncompleteCompletions);
            chai_1.expect(result.context && result.context.triggerCharacter).equals('.');
        });
    });
    describe('conversion of LSP completion to autocomplete+ completion', () => {
        const items = [
            createCompletionItem('align', {
                sortText: 'a',
                kind: ls.CompletionItemKind.Snippet,
                textEdit: {
                    range: { start: { line: 0, character: 4 }, end: { line: 0, character: 10 } },
                    newText: 'hello world',
                },
            }),
            createCompletionItem('list', {
                sortText: 'b',
                kind: ls.CompletionItemKind.Constant,
                textEdit: {
                    range: { start: { line: 0, character: 8 }, end: { line: 0, character: 13 } },
                    newText: 'shifted',
                },
            }),
            createCompletionItem('minimal', {
                sortText: 'c',
            }),
            createCompletionItem('old', {
                sortText: 'd',
                documentation: 'doc string',
                insertText: 'inserted',
                insertTextFormat: ls.InsertTextFormat.Snippet,
            }),
            createCompletionItem('documented', {
                sortText: 'e',
                detail: 'details',
                documentation: {
                    kind: 'markdown',
                    value: 'documentation',
                },
            }),
        ];
        let server;
        let autoCompleteAdapter;
        beforeEach(() => {
            server = createActiveServerSpy();
            autoCompleteAdapter = new autocomplete_adapter_1.default();
        });
        it('converts LSP CompletionItem array to AutoComplete Suggestions array', () => __awaiter(void 0, void 0, void 0, function* () {
            const customRequest = createRequest({ prefix: '', position: new atom_1.Point(0, 10) });
            customRequest.editor.setText('foo #align bar');
            sinon.stub(server.connection, 'completion').resolves(items);
            const results = yield autoCompleteAdapter.getSuggestions(server, customRequest);
            chai_1.expect(results.length).equals(items.length);
            chai_1.expect(results[0].displayText).equals('align');
            chai_1.expect(results[0].text).equals('hello world');
            chai_1.expect(results[0].replacementPrefix).equals('#align');
            chai_1.expect(results[0].type).equals('snippet');
            chai_1.expect(results[1].displayText).equals('list');
            chai_1.expect(results[1].text).equals('shifted');
            chai_1.expect(results[1].replacementPrefix).equals('gn'); // TODO: support post replacement too
            chai_1.expect(results[1].type).equals('constant');
            chai_1.expect(results[2].displayText).equals('minimal');
            chai_1.expect(results[2].text).equals('minimal');
            chai_1.expect(results[2].replacementPrefix).equals(''); // we sent an empty prefix
            chai_1.expect(results[3].displayText).equals('old');
            chai_1.expect(results[3].snippet).equals('inserted');
            chai_1.expect(results[3].description).equals('doc string');
            chai_1.expect(results[3].descriptionMarkdown).equals('doc string');
            chai_1.expect(results[4].displayText).equals('documented');
            chai_1.expect(results[4].description).is.undefined;
            chai_1.expect(results[4].descriptionMarkdown).equals('documentation');
            chai_1.expect(results[4].rightLabel).equals('details');
        }));
        it('respects onDidConvertCompletionItem', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([createCompletionItem('label')]);
            const results = yield autoCompleteAdapter.getSuggestions(server, createRequest({}), (c, a, r) => {
                a.text = c.label + ' ok';
                a.displayText = r.scopeDescriptor.getScopesArray()[0];
            });
            chai_1.expect(results.length).equals(1);
            chai_1.expect(results[0].displayText).equals('some.scope');
            chai_1.expect(results[0].text).equals('label ok');
        }));
        it('converts empty array into an empty AutoComplete Suggestions array', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([]);
            const results = yield autoCompleteAdapter.getSuggestions(server, createRequest({}));
            chai_1.expect(results.length).equals(0);
        }));
        it('converts LSP CompletionItem to AutoComplete Suggestion without textEdit', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('label', {
                    insertText: 'insert',
                    filterText: 'filter',
                    kind: ls.CompletionItemKind.Keyword,
                    detail: 'keyword',
                    documentation: 'a truly useful keyword',
                }),
            ]);
            const result = (yield autoCompleteAdapter.getSuggestions(server, createRequest({})))[0];
            chai_1.expect(result.text).equals('insert');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('keyword');
            chai_1.expect(result.description).equals('a truly useful keyword');
            chai_1.expect(result.descriptionMarkdown).equals('a truly useful keyword');
        }));
        it('converts LSP CompletionItem to AutoComplete Suggestion with textEdit', () => __awaiter(void 0, void 0, void 0, function* () {
            const customRequest = createRequest({
                prefix: '',
                position: new atom_1.Point(0, 10),
                activatedManually: false,
            });
            customRequest.editor.setText('foo #label bar');
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('label', {
                    insertText: 'insert',
                    filterText: 'filter',
                    kind: ls.CompletionItemKind.Variable,
                    detail: 'number',
                    documentation: 'a truly useful variable',
                    textEdit: {
                        range: { start: { line: 0, character: 4 }, end: { line: 0, character: 10 } },
                        newText: 'newText',
                    },
                }),
            ]);
            const result = (yield autoCompleteAdapter.getSuggestions(server, customRequest))[0];
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('variable');
            chai_1.expect(result.rightLabel).equals('number');
            chai_1.expect(result.description).equals('a truly useful variable');
            chai_1.expect(result.descriptionMarkdown).equals('a truly useful variable');
            chai_1.expect(result.replacementPrefix).equals('#label');
            chai_1.expect(result.text).equals('newText');
        }));
        it('converts LSP CompletionItem with insertText and filterText to AutoComplete Suggestion', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('label', {
                    insertText: 'insert',
                    filterText: 'filter',
                    kind: ls.CompletionItemKind.Keyword,
                    detail: 'detail',
                    documentation: 'a very exciting keyword',
                }),
                createCompletionItem('filteredOut', {
                    filterText: 'nop',
                }),
            ]);
            const results = yield autoCompleteAdapter.getSuggestions(server, createRequest({ prefix: 'fil' }));
            chai_1.expect(results.length).equals(1);
            const result = results[0];
            chai_1.expect(result.text).equals('insert');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals('a very exciting keyword');
            chai_1.expect(result.descriptionMarkdown).equals('a very exciting keyword');
        }));
        it('converts LSP CompletionItem with missing documentation to AutoComplete Suggestion', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('label', {
                    detail: 'detail',
                }),
            ]);
            const result = (yield autoCompleteAdapter.getSuggestions(server, createRequest({})))[0];
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals(undefined);
            chai_1.expect(result.descriptionMarkdown).equals(undefined);
        }));
        it('converts LSP CompletionItem with markdown documentation to AutoComplete Suggestion', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('label', {
                    detail: 'detail',
                    documentation: { value: 'Some *markdown*', kind: 'markdown' },
                }),
            ]);
            const result = (yield autoCompleteAdapter.getSuggestions(server, createRequest({})))[0];
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals(undefined);
            chai_1.expect(result.descriptionMarkdown).equals('Some *markdown*');
        }));
        it('converts LSP CompletionItem with plaintext documentation to AutoComplete Suggestion', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('label', {
                    detail: 'detail',
                    documentation: { value: 'Some plain text', kind: 'plaintext' },
                }),
            ]);
            const result = (yield autoCompleteAdapter.getSuggestions(server, createRequest({})))[0];
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals('Some plain text');
            chai_1.expect(result.descriptionMarkdown).equals(undefined);
        }));
        it('converts LSP CompletionItem without insertText or filterText to AutoComplete Suggestion', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('label', {
                    kind: ls.CompletionItemKind.Keyword,
                    detail: 'detail',
                    documentation: 'A very useful keyword',
                }),
            ]);
            const result = (yield autoCompleteAdapter.getSuggestions(server, createRequest({})))[0];
            chai_1.expect(result.text).equals('label');
            chai_1.expect(result.displayText).equals('label');
            chai_1.expect(result.type).equals('keyword');
            chai_1.expect(result.rightLabel).equals('detail');
            chai_1.expect(result.description).equals('A very useful keyword');
            chai_1.expect(result.descriptionMarkdown).equals('A very useful keyword');
        }));
        it('does not do anything if there is no textEdit', () => __awaiter(void 0, void 0, void 0, function* () {
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('', { filterText: 'rep' }),
            ]);
            const result = (yield autoCompleteAdapter.getSuggestions(server, createRequest({ prefix: 'rep' })))[0];
            chai_1.expect(result.text).equals('');
            chai_1.expect(result.displayText).equals('');
            chai_1.expect(result.replacementPrefix).equals('');
        }));
        it('applies changes from TextEdit to text', () => __awaiter(void 0, void 0, void 0, function* () {
            const customRequest = createRequest({ prefix: '', position: new atom_1.Point(0, 10) });
            customRequest.editor.setText('foo #align bar');
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('align', {
                    sortText: 'a',
                    textEdit: {
                        range: { start: { line: 0, character: 4 }, end: { line: 0, character: 10 } },
                        newText: 'hello world',
                    },
                }),
            ]);
            const results = yield autoCompleteAdapter.getSuggestions(server, customRequest);
            chai_1.expect(results[0].displayText).equals('align');
            chai_1.expect(results[0].text).equals('hello world');
            chai_1.expect(results[0].replacementPrefix).equals('#align');
        }));
        it('updates the replacementPrefix when the editor text changes', () => __awaiter(void 0, void 0, void 0, function* () {
            const customRequest = createRequest({ prefix: '', position: new atom_1.Point(0, 8) });
            customRequest.editor.setText('foo #ali bar');
            sinon.stub(server.connection, 'completion').resolves([
                createCompletionItem('align', {
                    sortText: 'a',
                    textEdit: {
                        range: { start: { line: 0, character: 4 }, end: { line: 0, character: 8 } },
                        newText: 'hello world',
                    },
                }),
            ]);
            let result = (yield autoCompleteAdapter.getSuggestions(server, customRequest))[0];
            chai_1.expect(result.replacementPrefix).equals('#ali');
            customRequest.editor.setTextInBufferRange([[0, 8], [0, 8]], 'g');
            customRequest.bufferPosition = new atom_1.Point(0, 9);
            result = (yield autoCompleteAdapter.getSuggestions(server, customRequest))[0];
            chai_1.expect(result.replacementPrefix).equals('#alig');
            customRequest.editor.setTextInBufferRange([[0, 9], [0, 9]], 'n');
            customRequest.bufferPosition = new atom_1.Point(0, 10);
            result = (yield autoCompleteAdapter.getSuggestions(server, customRequest))[0];
            chai_1.expect(result.replacementPrefix).equals('#align');
            customRequest.editor.setTextInBufferRange([[0, 7], [0, 9]], '');
            customRequest.bufferPosition = new atom_1.Point(0, 7);
            result = (yield autoCompleteAdapter.getSuggestions(server, customRequest))[0];
            chai_1.expect(result.replacementPrefix).equals('#al');
        }));
    });
    describe('completionKindToSuggestionType', () => {
        it('converts LSP CompletionKinds to AutoComplete SuggestionTypes', () => {
            const variable = autocomplete_adapter_1.default.completionKindToSuggestionType(ls.CompletionItemKind.Variable);
            const constructor = autocomplete_adapter_1.default.completionKindToSuggestionType(ls.CompletionItemKind.Constructor);
            const module = autocomplete_adapter_1.default.completionKindToSuggestionType(ls.CompletionItemKind.Module);
            chai_1.expect(variable).equals('variable');
            chai_1.expect(constructor).equals('function');
            chai_1.expect(module).equals('module');
        });
        it('defaults to "value"', () => {
            const result = autocomplete_adapter_1.default.completionKindToSuggestionType(undefined);
            chai_1.expect(result).equals('value');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,